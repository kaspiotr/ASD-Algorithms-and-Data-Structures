//author: @brytyjczyk (Anna Bryta≈Ñczyk)

Tresc:
[2pkt.] Zadanie 2. Rozwazmy tablice haszujace z adresowaniem otwartym i liniowym rozwiazywaniem konfliktow.
Zakladamy, ze sprawdzenie czy dany element nalezy do takiej tablicy zajmuje czas staly. Mamy dwie tablice,
A i B, obie majace n pol i przechowujace k elementow (k <= n). Przy standardowej implementacji sprawdzenie,
czy takie tablice zawieraja dokladnie takie same elementy zajmuje czas O(n). Prosze zaproponowac rozszerzenie
tej struktury danych tak, by nie pogorszyla sie zlozonosc operacji wstawiania, usuwania i sprawdzania
przynaleznosci elementow, ale by dalo sie sprawdzac czy dwie tablice maja dokladnie takie same elementy
w czasie O(k). Prosze opisac algorytm porownywania tablic.

Rozwiazanie (2/2pkt.):
Tworzymy dodatkowe tablice C[] i D[] o tym samym rozmiarze co dane tablice z haszowaniem A[] i B[]
(tzn. obydwie po n-elementow).
Przegladamy tablice z haszowanem A[] i inicjalizujemy tablice C[] wpisujac do jej elementow, pod
kolejnymi indeksami (poczawszy do elementu pod indeksem 0), numer indeksu pod ktorym, w tablicy
z haszowaniem A[], znajduje sie kolejna liczba.
Analogicznie postepujemy z tablica z haszowaniem B[] i utworzona przez nas wczesniej tablica C[].
W ten sposob tablice C[] i D[] beda wypelnione od indeksu 0 do k-1 wlacznie.

Podczas przegladania tablic z haszowaniem A[] i B[] kazdy z jej elementow rozszerzamy dodajac
do struktury go opisujacej pole 'indeks', gdzie zapisujemy nr indeksu elementu tablicy
wczesniej utworzonej (tablicy C[] w przypadku tablicy A[] i tablicy D[] w przypadku tablicy B[])
w ktorym zapisujemy wlasnie nr indeksu z tablicy z haszowaniem.

Jesli wstawiamy nowy element do tablicy z haszowaniem...

Jesli usuwamy element z tablicy haszujacej, to usuwamy jednoczesnie pole w zwyklej tablicy...


Algorytm porownywania tablic:
1. Tworzymy tablice C[] i D[] oraz rozszerzamy struktury opisujace elementy tablic z haszowaniem A[] i B[]
   w wyzej opisany sposob.
2. Przeszukujemy tablice C[] oraz D[] iterujac po kolejnych indeksach i (i od 0 do k-1). Za kazdym razem (dla kazdego i)
   patrzymy pod odpowiedni indeks w tablicach A[] i B[] i porownujemy czy elementy te maja taka sama wartosc.
3. Jesli odpowiadajace sobie elementy z tablic A[] i B[] dla jakiegos i nie beda mialy rownych wartosci przerywamy
   algorytm i zwracamy komunikat, ze tablice A[] i B[] nie maja dokladnie takich samych elementow.
   Jezeli dla kazdego i odpowiadajace sobie elementy z tablic A[] i B[] beda mialy rowne wartosci, to
   po przeiterowaniu po k-razy po tablicach C[] i D[] algorytm zwraca komunikat, ze maja dokladnie takie same elementy.

Zlozonosc czasowa algorytmu porownywania tablic A[] i B[] wyniesie wowczas O(k), bo po k elementow (rozlokowanych
pod indeksami od 0 do k-1) zawieraja tablice C[] i D[], ktore musimy przegladnac.

